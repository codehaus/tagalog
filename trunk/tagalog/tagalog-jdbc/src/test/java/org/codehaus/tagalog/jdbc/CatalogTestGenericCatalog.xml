<?xml version="1.0"?>

<catalog>
  <proc name="query-no-table">
    <dialect-choice>
      <query rows="one" dialect="hsqldb">select 42 result from system_users</query>
      <query rows="one" dialect="mysql">select 42 result</query>
      <query rows="one" dialect="oracle">select 42 result from dual</query>
    </dialect-choice>
  </proc>

  <!-- Test statements that operate on a simple (id, name) table.
       All these statements have names that begin with the string 'ttq'.
    -->

  <proc name="ttq-create-table">
    <stmt>
      create table catalog_test (
        id    integer not null primary key,
        name  varchar(20) not null
      )
    </stmt>
  </proc>

  <proc name="ttq-drop-table">
    <stmt>drop table catalog_test</stmt>
  </proc>

  <proc name="ttq-create-data">
    <update>insert into catalog_test values (1, 'mhw')</update>
    <update>insert into catalog_test values (2, 'fred')</update>
    <update>insert into catalog_test values (42, 'answer')</update>
  </proc>

  <!-- queries for zero rows -->

  <proc name="ttq-q-no-rows-get-zero">
    <query rows="zero">
      select id, name from catalog_test where id = 100
    </query>
  </proc>

  <proc name="ttq-q-no-rows-get-one">
    <query rows="zero">
      select id, name from catalog_test where id = 1
    </query>
  </proc>

  <proc name="ttq-q-no-rows-get-many">
    <query rows="zero">
      select id, name from catalog_test
    </query>
  </proc>

  <!-- queries for zero or one row -->

  <proc name="ttq-q-zero-or-one-rows-get-zero">
    <query rows="zero-or-one">
      select id, name from catalog_test where id = 100
    </query>
  </proc>

  <proc name="ttq-q-zero-or-one-rows-get-one">
    <query rows="zero-or-one">
      select id, name from catalog_test where id = 1
    </query>
  </proc>

  <proc name="ttq-q-zero-or-one-rows-get-many">
    <query rows="zero-or-one">
      select id, name from catalog_test order by id
    </query>
  </proc>

  <!-- queries for one row -->

  <proc name="ttq-q-one-row-get-zero">
    <query rows="one">
      select id, name from catalog_test where id = 100
    </query>
  </proc>

  <proc name="ttq-q-one-row-get-one">
    <query rows="one">
      select id, name from catalog_test where id = 1
    </query>
  </proc>

  <proc name="ttq-q-one-row-get-many">
    <query rows="one">
      select id, name from catalog_test order by id
    </query>
  </proc>

  <!-- queries for one or more rows -->

  <proc name="ttq-q-one-or-more-rows-get-zero">
    <query rows="one-or-more">
      select id, name from catalog_test where id = 100
    </query>
  </proc>

  <proc name="ttq-q-one-or-more-rows-get-one">
    <query rows="one-or-more">
      select id, name from catalog_test where id = 1
    </query>
  </proc>

  <proc name="ttq-q-one-or-more-rows-get-many">
    <query rows="one-or-more">
      select id, name from catalog_test order by id
    </query>
  </proc>

  <!-- queries for zero or more rows -->

  <proc name="ttq-q-zero-or-more-rows-get-zero">
    <query rows="zero-or-more">
      select id, name from catalog_test where id = 100
    </query>
  </proc>

  <proc name="ttq-q-zero-or-more-rows-get-one">
    <query rows="zero-or-more">
      select id, name from catalog_test where id = 1
    </query>
  </proc>

  <proc name="ttq-q-zero-or-more-rows-get-many">
    <query rows="zero-or-more">
      select id, name from catalog_test order by id
    </query>
  </proc>

  <!-- queries with bind variables -->

  <proc name="ttq-q-by-id">
    <query>
      select id, name from catalog_test where id = ?{id}
    </query>
  </proc>

  <proc name="ttq-q-by-name">
    <query>
      select id, name from catalog_test where name = ?{name}
    </query>
  </proc>

  <proc name="ttq-q-generic">
    <query>
      select id, name from ${table} where ${column} = ?{value}
    </query>
  </proc>

  <!-- Test update statements that return an updated row count. We copy
       rows between two tables as MySQL versions < 4.0.14 don't support
       inserting into the table you're selecting from.
    -->

  <proc name="tuc-create-table">
    <stmt>
      create table one (
        id    integer not null primary key,
        a     varchar(20),
        b     varchar(20)
      )
    </stmt>
    <stmt>
      create table two (
        id    integer not null primary key,
        a     varchar(20),
        b     varchar(20)
      )
    </stmt>
  </proc>

  <proc name="tuc-drop-table">
    <stmt>drop table one</stmt>
    <stmt>drop table two</stmt>
  </proc>

  <proc name="tuc-insert-one">
    <update>
      insert into one values (1, 'a', null)
    </update>
  </proc>

  <proc name="tuc-copy-to-two">
    <update>
      insert into two
      select id + ?{offset}, a, b
        from one
    </update>
  </proc>

  <proc name="tuc-copy-to-one">
    <update>
      insert into one
      select * from two
    </update>
  </proc>

  <proc name="tuc-truncate-two">
    <dialect-choice>
      <update>
        delete from two
      </update>
      <!-- MySQL 3.23 returns update count of 0 unless we use a where clause -->
      <update dialect="mysql">
        delete from two where 1 > 0
      </update>
    </dialect-choice>
  </proc>

  <!-- Test statements that use bind variables, using a table with more
       columns.
    -->

  <proc name="tbind-create-table">
    <stmt>
      create table bind_test (
        id    integer not null primary key,
        a     varchar(20) not null,
        b     varchar(20) not null,
        c     varchar(20) not null,
        d     varchar(20) not null,
        e     varchar(20) not null
      )
    </stmt>
  </proc>

  <proc name="tbind-drop-table">
    <stmt>drop table bind_test</stmt>
  </proc>

  <proc name="tbind-insert">
    <update>
      insert into bind_test (id, a, b, c, d, e)
      values (?{id}, ?{rod}, ?{jane}, ?{freddy}, ?{zippy}, ?{bungle})
    </update>
  </proc>

  <proc name="tbind-query">
    <query rows="one">
      select id, a, b, c, d, e from bind_test where id = ?{id}
    </query>
  </proc>

  <!-- Test data type coverage by creating a table with a column of
       each supported datatype.
    -->

  <proc name="tdtc-c-table">
    <dialect-choice>
      <stmt dialect="hsqldb">
        create table all_types (
          col_int integer,
          col_string varchar(40),
          col_date date,
          col_time time,
          col_timestamp datetime
        )
      </stmt>
      <stmt dialect="mysql">
        create table all_types (
          col_int integer,
          col_string varchar(40),
          col_date date,
          col_time time,
          col_timestamp datetime
        )
      </stmt>
      <stmt dialect="oracle">
        create table all_types (
          col_int number(38, 0),
          col_string varchar2(40),
          col_date date,
          col_time date,
          col_timestamp date
        )
      </stmt>
    </dialect-choice>
  </proc>

  <proc name="tdtc-i-int">
    <stmt>
      insert into all_types (col_int) values (?{value})
    </stmt>
  </proc>

  <proc name="tdtc-s-int">
    <query rows="one">
      select col_int from all_types
    </query>
  </proc>

  <proc name="tdtc-i-string">
    <stmt>
      insert into all_types (col_string) values (?{value})
    </stmt>
  </proc>

  <proc name="tdtc-s-string">
    <query rows="one">
      select col_string from all_types
    </query>
  </proc>

  <proc name="tdtc-i-date">
    <stmt>
      insert into all_types (col_date) values (?{value})
    </stmt>
  </proc>

  <proc name="tdtc-s-date">
    <query rows="one">
      select col_date from all_types
    </query>
  </proc>

  <proc name="tdtc-i-time">
    <stmt>
      insert into all_types (col_time) values (?{value})
    </stmt>
  </proc>

  <proc name="tdtc-s-time">
    <query rows="one">
      select col_time from all_types
    </query>
  </proc>

  <proc name="tdtc-i-timestamp">
    <stmt>
      insert into all_types (col_timestamp) values (?{value})
    </stmt>
  </proc>

  <proc name="tdtc-s-timestamp">
    <query rows="one">
      select col_timestamp from all_types
    </query>
  </proc>

  <proc name="tdtc-delete">
    <stmt>
      delete from all_types
    </stmt>
  </proc>

  <proc name="tdtc-d-table">
    <stmt>
      drop table all_types
    </stmt>
  </proc>

  <!-- Test insert statements that allocate unique ids.

       For hsqldb we use an identity field. hsqldb (1.7.3.0) doesn't
       support getGeneratedKeys though, so we use the identity() function
       to retrieve the value. Also note that hsqldb sequences start at 0
       by default.

       For MySQL we use the JDBC 3.0 getGeneratedKeys method to return a
       result set containing the allocated key.

       For Oracle we use a sequence object and retrieve the value after
       we have done the insert.
    -->

  <proc name="tikg-c-table">
    <dialect-choice>
      <stmt>
        create table key_gen (
          id     integer generated by default as identity (start with 1),
          value  varchar(40) not null,
          length integer,
          primary key(id)
        )
      </stmt>
      <stmt dialect="mysql">
        create table key_gen (
          id     integer not null auto_increment,
          value  varchar(40) not null,
          length integer,
          primary key(id)
        )
      </stmt>
      <sequence dialect="oracle">
        <stmt dialect="oracle">
          create table key_gen (
            id     integer not null,
            value  varchar2(40) not null,
            length integer,
            primary key(id)
          )
        </stmt>
        <stmt dialect="oracle">
          create sequence key_gen_seq
        </stmt>
      </sequence>
    </dialect-choice>
  </proc>

  <proc name="tikg-insert">
    <dialect-choice>
      <sequence dialect="hsqldb">
        <update dialect="hsqldb">
          insert into key_gen (value, length)
          values (?{value}, ?{length})
        </update>
        <query rows="one">
          call identity()
        </query>
      </sequence>
      <update dialect="mysql" generates-keys="true">
        insert into key_gen (value, length)
        values (?{value}, ?{length})
      </update>
      <sequence dialect="oracle">
        <update>
          insert into key_gen
          values (key_gen_seq.nextval, ?{value}, ?{length})
        </update>
        <query rows="one">
          select key_gen_seq.currval from dual
        </query>
      </sequence>
    </dialect-choice>
  </proc>

  <proc name="tikg-query">
    <query rows="one">
      select id, value, length
      from key_gen
      where id = ?{id}
    </query>
  </proc>

  <proc name="tikg-d-table">
    <stmt>drop table key_gen</stmt>
    <dialect-choice optional="true">
      <stmt dialect="oracle">drop sequence key_gen_seq</stmt>
    </dialect-choice>
  </proc>

</catalog>
